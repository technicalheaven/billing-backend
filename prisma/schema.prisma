// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id         String     @id @default(uuid())
  name       String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  roles      Role[]
  users      User[]
  categories Category[]
  products   Product[]
  orders     Order[]

  @@map("tenants")
}

model Role {
  id        String   @id @default(uuid())
  name      String
  tenantId  String // Foreign key for Tenant
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tenant    Tenant   @relation(fields: [tenantId], references: [id]) // Relation to Tenant
  users     User[]

  @@map("roles")
}

model User {
  id           Int      @id @default(autoincrement())
  name         String
  email        String
  country      String
  countryCode  String
  phone        String
  passwordHash String
  jwtToken     String?
  tenantId     String // Foreign key for Tenant
  roleId       String // Foreign key for Role
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  tenant       Tenant   @relation(fields: [tenantId], references: [id]) // Relation to Tenant
  role         Role     @relation(fields: [roleId], references: [id]) // Relation to Role

  @@map("users")
}

model Category {
  id        String    @id @default(uuid())
  name      String
  tenantId  String // Foreign key for Tenant
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  tenant    Tenant    @relation(fields: [tenantId], references: [id]) // Relation to Tenant
  products  Product[]

  @@map("categories")
}

model Product {
  id          String   @id @default(uuid())
  title       String
  productCode String
  quantity    Int
  price       Decimal
  categoryId  String // Foreign key for Category
  tenantId    String // Foreign key for Tenant
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  category    Category @relation(fields: [categoryId], references: [id]) // Define relation to Category
  tenant      Tenant   @relation(fields: [tenantId], references: [id]) // Relation to Tenant

  @@map("products")
}

model Order {
  id            String         @id @default(uuid())
  subTotal      Decimal
  tax           Decimal
  total         Decimal
  tenantId      String // Foreign key for Tenant
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  tenant        Tenant         @relation(fields: [tenantId], references: [id]) // Relation to Tenant
  orderProducts OrderProduct[]

  @@map("orders")
}

model OrderProduct {
  id        String   @id @default(uuid())
  title     String
  quantity  Int
  price     Decimal
  tax       Decimal
  orderId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id])

  @@map("order_products")
}
